---
description: 
globs: 
alwaysApply: true
---
# Unity 实现指南

## 基础操作指南

### 1. 创建新脚本
1. 在 Project 窗口中右键点击 `Assets/Script` 目录
2. 选择 Create > C# Script
3. 输入脚本名称（必须与类名相同）
4. 双击脚本文件在代码编辑器中打开

### 2. 将脚本添加到游戏对象
1. 在 Hierarchy 窗口中选择目标游戏对象
2. 在 Inspector 窗口点击 "Add Component"
3. 在搜索框中输入脚本名称
4. 点击搜索结果中的脚本以添加

### 3. 预制件（Prefab）操作
1. 创建预制件：将 Hierarchy 中的游戏对象拖拽到 Project 窗口的 `Assets/Prefabs` 文件夹
2. 修改预制件：
   - 双击预制件进入预制件编辑模式
   - 或选择预制件实例，点击 Inspector 中的 "Open Prefab"
3. 应用修改：点击 "Apply" 保存对预制件的更改

## 常见功能实现指南

### 1. 角色移动系统
**Unity编辑器步骤：**
1. 创建角色游戏对象：
   - Hierarchy > Create > 2D Object > Sprite（2D游戏）
   - 重命名为 "Player"
2. 添加组件：
   - Rigidbody2D（2D物理）
   - Collider2D（碰撞检测）
   - [PlayerController.cs](mdc:Assets/Script/Player/PlayerController.cs)

**代码实现：**
```csharp
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [Header("移动参数")]
    public float moveSpeed = 5f;
    private Rigidbody2D rb;

    void Start()
    {
        // 获取组件引用
        rb = GetComponent<Rigidbody2D>();
    }

    void Update()
    {
        // 获取输入
        float moveX = Input.GetAxisRaw("Horizontal");
        float moveY = Input.GetAxisRaw("Vertical");

        // 移动角色
        Vector2 movement = new Vector2(moveX, moveY).normalized;
        rb.velocity = movement * moveSpeed;
    }
}
```

### 2. 对话系统
**Unity编辑器步骤：**
1. 创建UI画布：
   - Hierarchy > Create > UI > Canvas
   - 确保有 EventSystem
2. 创建对话框：
   - 在Canvas下创建 UI > Panel
   - 添加 UI > Text - TextMeshPro 用于显示对话内容
   - 添加 UI > Button 用于继续对话
3. 设置UI：
   - 调整Panel的RectTransform以适应屏幕
   - 设置合适的锚点（Anchor）和轴心点（Pivot）
4. 添加对话管理器：
   - 创建空游戏对象 "DialogueManager"
   - 添加 [DialogueManager.cs](mdc:Assets/Script/Dialogue/DialogueManager.cs)

**代码实现：**
```csharp
using UnityEngine;
using TMPro;

public class DialogueManager : MonoBehaviour
{
    [Header("UI引用")]
    public GameObject dialoguePanel;
    public TextMeshProUGUI dialogueText;
    
    [Header("对话设置")]
    public float textSpeed = 0.05f;

    void Start()
    {
        // 初始化时隐藏对话框
        dialoguePanel.SetActive(false);
    }

    public void StartDialogue(string[] lines)
    {
        dialoguePanel.SetActive(true);
        // 显示对话内容
        StartCoroutine(TypeLine(lines[0]));
    }

    IEnumerator TypeLine(string line)
    {
        dialogueText.text = "";
        foreach (char c in line.ToCharArray())
        {
            dialogueText.text += c;
            yield return new WaitForSeconds(textSpeed);
        }
    }
}
```

### 3. 物品系统
**Unity编辑器步骤：**
1. 创建物品数据：
   - 在Project窗口中右键
   - Create > ScriptableObject > ItemData
2. 创建物品预制件：
   - 创建基础游戏对象
   - 添加Sprite Renderer和Collider2D
   - 添加 [Item.cs](mdc:Assets/Script/Inventory/Item.cs)
   - 拖拽到Prefabs文件夹创建预制件
3. 创建物品栏UI：
   - 在Canvas下创建网格布局（Grid Layout Group）
   - 创建物品槽预制件（Item Slot）
   - 设置合适的间距和大小

**代码实现：**
```csharp
// ItemData.cs
using UnityEngine;

[CreateAssetMenu(fileName = "New Item", menuName = "Inventory/Item")]
public class ItemData : ScriptableObject
{
    public string itemName;
    public Sprite itemIcon;
    public string description;
}

// Item.cs
public class Item : MonoBehaviour
{
    public ItemData itemData;

    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player"))
        {
            // 拾取物品
            InventoryManager.Instance.AddItem(itemData);
            Destroy(gameObject);
        }
    }
}
```

## 注意事项
1. 在添加组件时，确保Inspector窗口中显示的所有必要字段都已正确设置
2. 对于需要互相引用的游戏对象，可以通过Inspector中拖拽赋值或代码中使用Find/GetComponent获取
3. 调试时可以使用Scene视图中的Gizmos进行可视化
4. 修改预制件时记得点击Apply保存更改

## 调试技巧
1. 使用Debug.Log()输出信息到Console窗口
2. 在Inspector中勾选组件左上角的复选框可以暂时禁用该组件
3. 使用Scene视图的播放控制来测试游戏
4. 在运行时修改的值在停止运行后会恢复，需要在非运行状态下修改并保存

请参考这个指南来实现各种Unity功能。每个功能的实现都包含了详细的Unity编辑器操作步骤和相应的代码实现。

